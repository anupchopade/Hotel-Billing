generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  cashier
}

enum ItemType {
  full
  half
}

model User {
  id           String  @id @default(cuid())
  name         String
  email        String  @unique
  passwordHash String
  role         Role
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?  // base32
  isDeleted    Boolean @default(false)
  createdAt    DateTime @default(now())
  bills        Bill[]   @relation("UserBills")
  refreshTokens RefreshToken[]
  logs          Log[]
}

model MenuItem {
  id            String  @id @default(cuid())
  name          String
  category      String
  fullPrice     Decimal @db.Decimal(10,2)
  halfPrice     Decimal @db.Decimal(10,2)
  isAvailable   Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  billItems     BillItem[]
}

model Bill {
  id           String   @id @default(cuid())
  billNo       String   @unique
  customer     String
  tableNumber  String
  subtotal     Decimal  @db.Decimal(10,2)
  cgst         Decimal  @db.Decimal(10,2)
  sgst         Decimal  @db.Decimal(10,2)
  discount     Decimal  @db.Decimal(10,2)
  total        Decimal  @db.Decimal(10,2)
  createdAt    DateTime @default(now())
  createdById  String
  createdBy    User     @relation("UserBills", fields: [createdById], references: [id])
  items        BillItem[]
}

model BillItem {
  id         String   @id @default(cuid())
  billId     String
  bill       Bill     @relation(fields: [billId], references: [id])
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  nameSnapshot String
  type       ItemType
  qty        Int
  price      Decimal  @db.Decimal(10,2)
  total      Decimal  @db.Decimal(10,2)
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Log {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  action     String
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())
}


